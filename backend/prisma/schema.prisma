generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String         @id @default(cuid())
  username           String         @unique
  email              String         @unique
  workEmail          String         @unique
  designation        UserRole
  currentIP          String?
  mmid               String         @unique @default(cuid())
  softwareLoginEmail String         @unique
  password           String
  isActive           Boolean        @default(true)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  loginSessions      LoginSession[]
  purchases          Purchase[]

  @@map("users")
}

model SuperAdmin {
  id                 String                   @id @default(cuid())
  firstName          String
  lastName           String
  username           String                   @unique
  email              String                   @unique
  workEmail          String                   @unique
  softwareLoginEmail String                   @unique
  password           String
  currentIP          String?
  mmid               String                   @unique @default(cuid())
  isActive           Boolean                  @default(true)
  lastLoginAt        DateTime?
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  loginSessions      SuperAdminLoginSession[]

  @@map("super_admins")
}

model Plan {
  id          String     @id @default(cuid())
  name        String
  type        PlanType
  description String?
  price       Float
  features    String[]
  duration    Int
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  purchases   Purchase[]

  @@map("plans")
}

model Coupon {
  id            String     @id @default(cuid())
  code          String     @unique
  description   String?
  discountType  String
  discountValue Float
  minAmount     Float?
  maxDiscount   Float?
  usageLimit    Int?
  usedCount     Int        @default(0)
  isActive      Boolean    @default(true)
  validFrom     DateTime
  validUntil    DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  purchases     Purchase[]

  @@map("coupons")
}

model Purchase {
  id             String        @id @default(cuid())
  userId         String
  planId         String
  couponId       String?
  amount         Float
  discountAmount Float         @default(0)
  gstAmount      Float
  totalAmount    Float
  paymentStatus  PaymentStatus @default(PENDING)
  paymentId      String?
  paymentMethod  String?
  userIP         String
  userAgent      String?
  purchasedAt    DateTime      @default(now())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  coupon         Coupon?       @relation(fields: [couponId], references: [id])
  plan           Plan          @relation(fields: [planId], references: [id])
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("purchases")
}

model LoginSession {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  ipAddress String
  userAgent String?
  isActive  Boolean  @default(true)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("login_sessions")
}

model SuperAdminLoginSession {
  id           String     @id @default(cuid())
  superAdminId String
  token        String     @unique
  ipAddress    String
  userAgent    String?
  isActive     Boolean    @default(true)
  expiresAt    DateTime
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  superAdmin   SuperAdmin @relation(fields: [superAdminId], references: [id], onDelete: Cascade)

  @@map("super_admin_login_sessions")
}

model SuperPin {
  id                String   @id @default(cuid())
  pin               String   @unique
  description       String?
  setupPageUrlAlias String   @default("/setup-super")
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("super_pins")
}

enum UserRole {
  CEO
  HR
  EMPLOYEE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PlanType {
  BASIC
  PROFESSIONAL
  ENTERPRISE
}
